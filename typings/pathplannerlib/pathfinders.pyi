"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Set, Tuple, Union
from dataclasses import dataclass
from wpimath.geometry import Translation2d
from .path import GoalEndState, PathConstraints, PathPlannerPath, Waypoint
from threading import RLock, Thread

class Pathfinder:
    def isNewPathAvailable(self) -> bool:
        """
        Get if a new path has been calculated since the last time a path was retrieved

        :return: True if a new path is available
        """
        ...

    def getCurrentPath(
        self, constraints: PathConstraints, goal_end_state: GoalEndState
    ) -> Union[PathPlannerPath, None]:
        """
        Get the most recently calculated path

        :param constraints: The path constraints to use when creating the path
        :param goal_end_state: The goal end state to use when creating the path
        :return: The PathPlannerPath created from the points calculated by the pathfinder
        """
        ...

    def setStartPosition(self, start_position: Translation2d) -> None:
        """
        Set the start position to pathfind from

        :param start_position: Start position on the field. If this is within an obstacle it will be moved to the nearest non-obstacle node.
        """
        ...

    def setGoalPosition(self, goal_position: Translation2d) -> None:
        """
        Set the goal position to pathfind to

        :param goal_position: Goal position on the field. f this is within an obstacle it will be moved to the nearest non-obstacle node.
        """
        ...

    def setDynamicObstacles(
        self,
        obs: List[Tuple[Translation2d, Translation2d]],
        current_robot_pos: Translation2d,
    ) -> None:
        """
        Set the dynamic obstacles that should be avoided while pathfinding.

        :param obs: A List of Translation2d pairs representing obstacles. Each Translation2d represents opposite corners of a bounding box.
        :param current_robot_pos: The current position of the robot. This is needed to change the start position of the path to properly avoid obstacles
        """
        ...

@dataclass(frozen=True)
class GridPosition:
    x: int
    y: int
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def compareTo(self, o: GridPosition) -> int: ...

class LocalADStar(Pathfinder):
    _SMOOTHING_ANCHOR_PCT: float = ...
    _SMOOTHING_CONTROL_PCT: float = ...
    _EPS: float = ...
    _fieldLength: float = ...
    _fieldWidth: float = ...
    _nodeSize: float = ...
    _nodesX: int = ...
    _nodesY: int = ...
    _g: Dict[GridPosition, float] = ...
    _rhs: Dict[GridPosition, float] = ...
    _open: Dict[GridPosition, Tuple[float, float]] = ...
    _incons: Dict[GridPosition, Tuple[float, float]] = ...
    _closed: Set[GridPosition] = ...
    _staticObstacles: Set[GridPosition] = ...
    _dynamicObstacles: Set[GridPosition] = ...
    _requestObstacles: Set[GridPosition] = ...
    _requestStart: GridPosition
    _requestRealStartPos: Translation2d
    _requestGoal: GridPosition
    _requestRealGoalPos: Translation2d
    _eps: float
    _planningThread: Thread
    _requestMinor: bool = ...
    _requestMajor: bool = ...
    _requestReset: bool = ...
    _newPathAvailable: bool = ...
    _pathLock: RLock = ...
    _requestLock: RLock = ...
    _currentWaypoints: List[Waypoint] = ...
    _currentPathFull: List[GridPosition] = ...
    def __init__(self) -> None: ...
    def isNewPathAvailable(self) -> bool:
        """
        Get if a new path has been calculated since the last time a path was retrieved

        :return: True if a new path is available
        """
        ...

    def getCurrentPath(
        self, constraints: PathConstraints, goal_end_state: GoalEndState
    ) -> Union[PathPlannerPath, None]:
        """
        Get the most recently calculated path

        :param constraints: The path constraints to use when creating the path
        :param goal_end_state: The goal end state to use when creating the path
        :return: The PathPlannerPath created from the points calculated by the pathfinder
        """
        ...

    def setStartPosition(self, start_position: Translation2d) -> None:
        """
        Set the start position to pathfind from

        :param start_position: Start position on the field. If this is within an obstacle it will be moved to the nearest non-obstacle node.
        """
        ...

    def setGoalPosition(self, goal_position: Translation2d) -> None:
        """
        Set the goal position to pathfind to

        :param goal_position: Goal position on the field. f this is within an obstacle it will be moved to the nearest non-obstacle node.
        """
        ...

    def setDynamicObstacles(
        self,
        obs: List[Tuple[Translation2d, Translation2d]],
        current_robot_pos: Translation2d,
    ) -> None:
        """
        Set the dynamic obstacles that should be avoided while pathfinding.

        :param obs: A List of Translation2d pairs representing obstacles. Each Translation2d represents opposite corners of a bounding box.
        :param current_robot_pos: The current position of the robot. This is needed to change the start position of the path to properly avoid obstacles
        """
        ...

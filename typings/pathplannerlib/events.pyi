"""
This type stub file was generated by pyright.
"""

from typing import Callable, List, TYPE_CHECKING
from commands2 import Command, Subsystem
from commands2.button import Trigger
from wpilib.event import EventLoop
from .trajectory import PathPlannerTrajectory
from .path import PathPlannerPath

if TYPE_CHECKING: ...

class Event:
    _timestamp: float
    def __init__(self, timestamp: float) -> None:
        """
        Create a new event

        :param timestamp: The trajectory timestamp this event should be handled at
        """
        ...

    def getTimestamp(self) -> float: ...
    def setTimestamp(self, timestamp: float) -> None: ...
    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

class EventScheduler:
    _eventCommands: dict
    _upcomingEvents: List[Event]
    _eventLoop: EventLoop = ...
    def __init__(self) -> None:
        """
        Create a new EventScheduler
        """
        ...

    def initialize(self, trajectory: PathPlannerTrajectory) -> None:
        """
        Initialize the EventScheduler for the given trajectory. This should be called from the initialize
        method of the command running this scheduler.

        :param trajectory: The trajectory this scheduler should handle events for
        """
        ...

    def execute(self, time: float) -> None:
        """
        Run the scheduler. This should be called from the execute method of the command running this scheduler.

        :param time: The current time along the trajectory
        """
        ...

    def end(self) -> None:
        """
        End commands currently being run by this scheduler. This should be called from the end method of
        the command running this scheduler.
        """
        ...

    @staticmethod
    def getSchedulerRequirements(path: PathPlannerPath) -> set[Subsystem]:
        """
        Get the event requirements for the given path

        :param path: The path to get all requirements for
        :return: Set of event requirements for the given path
        """
        ...

    @staticmethod
    def getEventLoop() -> EventLoop: ...
    def scheduleCommand(self, command: Command) -> None:
        """
        Schedule a command on this scheduler. This will cancel other commands that share requirements
        with the given command. Do not call this.

        :param command: The command to schedule
        """
        ...

    def cancelCommand(self, command: Command) -> None:
        """
        Cancel a command on this scheduler. Do not call this.

        :param command: The command to cancel
        """
        ...

class EventTrigger(Trigger):
    _eventConditions: dict[str, bool] = ...
    def __init__(self, name: str, eventLoop: EventLoop = ...) -> None: ...
    @staticmethod
    def setCondition(name: str, value: bool) -> None: ...
    @staticmethod
    def pollCondition(name: str) -> Callable[[], bool]: ...

class PointTowardsZoneTrigger(Trigger):
    _zoneConditions: dict[str, bool] = ...
    def __init__(self, name: str, eventLoop: EventLoop = ...) -> None: ...
    @staticmethod
    def setWithinZone(name: str, withinZone: bool) -> None: ...
    @staticmethod
    def pollCondition(name: str) -> Callable[[], bool]: ...

class ScheduleCommandEvent(Event):
    _command: Command
    def __init__(self, timestamp: float, command: Command) -> None:
        """
        Create an event to schedule a command

        :param timestamp: The trajectory timestamp for this event
        :param command: The command to schedule
        """
        ...

    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

class CancelCommandEvent(Event):
    _command: Command
    def __init__(self, timestamp: float, command: Command) -> None:
        """
        Create an event to cancel a command

        :param timestamp: The trajectory timestamp for this event
        :param command: The command to cancel
        """
        ...

    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

class TriggerEvent(Event):
    _name: str
    _active: bool
    def __init__(self, timestamp: float, name: str, active: bool) -> None:
        """
        Create an event to control an event trigger

        :param timestamp: The trajectory timestamp for this event
        :param name: The name of the trigger to control
        :param active: Should the trigger be activated by this event
        """
        ...

    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

class PointTowardsZoneEvent(Event):
    _name: str
    _active: bool
    def __init__(self, timestamp: float, name: str, active: bool) -> None:
        """
        Create an event to control a point towards zone trigger

        :param timestamp: The trajectory timestamp for this event
        :param name: The name of the zone
        :param active: Should the trigger be activated by this event
        """
        ...

    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

class OneShotTriggerEvent(Event):
    _name: str
    _resetCommand: Command
    def __init__(self, timestamp: float, name: str) -> None:
        """
        Create an event for activating a trigger, then deactivating it the next loop

        :param timestamp: The trajectory timestamp for this event
        :param name: The name of the trigger to control
        """
        ...

    def handleEvent(self, eventScheduler: EventScheduler) -> None: ...
    def cancelEvent(self, eventScheduler: EventScheduler) -> None: ...
    def copyWithTime(self, timestamp: float) -> Event: ...

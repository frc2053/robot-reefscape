"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from wpimath.geometry import Pose2d, Rotation2d, Translation2d
from wpimath.kinematics import ChassisSpeeds, SwerveModuleState
from .util import DriveFeedforwards
from .config import RobotConfig
from .events import Event
from typing import List, TYPE_CHECKING, Union
from .path import PathConstraints, PathPlannerPath

if TYPE_CHECKING: ...

@dataclass
class SwerveModuleTrajectoryState(SwerveModuleState):
    fieldAngle: Rotation2d = ...
    fieldPos: Translation2d = ...
    deltaPos: float = ...
    def __init__(self) -> None: ...

@dataclass
class PathPlannerTrajectoryState:
    timeSeconds: float = ...
    fieldSpeeds: ChassisSpeeds = ...
    pose: Pose2d = ...
    linearVelocity: float = ...
    feedforwards: DriveFeedforwards = ...
    heading: Rotation2d = ...
    deltaPos: float = ...
    deltaRot: Rotation2d = ...
    moduleStates: List[SwerveModuleTrajectoryState] = ...
    constraints: PathConstraints = ...
    waypointRelativePos: float = ...
    def interpolate(
        self, end_val: PathPlannerTrajectoryState, t: float
    ) -> PathPlannerTrajectoryState:
        """
        Interpolate between this state and the given state

        :param end_val: PathPlannerTrajectoryState to interpolate with
        :param t: Interpolation factor (0.0-1.0)
        :return: Interpolated state
        """
        ...

    def reverse(self) -> PathPlannerTrajectoryState:
        """
        Get the state reversed, used for following a trajectory reversed with a differential drivetrain

        :return: The reversed state
        """
        ...

    def flip(self) -> PathPlannerTrajectoryState:
        """
        Flip this trajectory state for the other side of the field, maintaining a blue alliance origin

        :return: This trajectory state flipped to the other side of the field
        """
        ...

    def copyWithTime(self, time: float) -> PathPlannerTrajectoryState:
        """
        Copy this state and change the timestamp

        :param time: The new time to use
        :return: Copied state with the given time
        """
        ...

class PathPlannerTrajectory:
    _states: List[PathPlannerTrajectoryState]
    _events: List[Event]
    def __init__(
        self,
        path: Union[PathPlannerPath, None],
        starting_speeds: Union[ChassisSpeeds, None],
        starting_rotation: Union[Rotation2d, None],
        config: Union[RobotConfig, None],
        states: List[PathPlannerTrajectoryState] = ...,
        events: List[Event] = ...,
    ) -> None:
        """
        Generate a PathPlannerTrajectory. If "states" is provided, the other arguments can be None

        :param path: PathPlannerPath to generate the trajectory for
        :param starting_speeds: Starting speeds of the robot when starting the trajectory
        :param starting_rotation: Starting rotation of the robot when starting the trajectory
        :param config: The RobotConfig describing the robot
        :param states: Pre-generated trajectory states
        :param events: Events for this trajectory
        """
        ...

    def getEvents(self) -> List[Event]:
        """
        Get all the events to run while following this trajectory

        :return: Events in this trajectory
        """
        ...

    def getStates(self) -> List[PathPlannerTrajectoryState]:
        """
        Get all of the pre-generated states in the trajectory

        :return: List of all states
        """
        ...

    def getState(self, index: int) -> PathPlannerTrajectoryState:
        """
        Get the goal state at the given index

        :param index: Index of the state to get
        :return: The state at the given index
        """
        ...

    def getInitialState(self) -> PathPlannerTrajectoryState:
        """
        Get the initial state of the trajectory

        :return: The initial state
        """
        ...

    def getEndState(self) -> PathPlannerTrajectoryState:
        """
        Get the end state of the trajectory

        :return: The end state
        """
        ...

    def getTotalTimeSeconds(self) -> float:
        """
        Get the total run time of the trajectory

        :return: Total run time in seconds
        """
        ...

    def getInitialPose(self) -> Pose2d:
        """
        Get the initial robot pose at the start of the trajectory

        :return: Pose of the robot at the initial state
        """
        ...

    def sample(self, time: float) -> PathPlannerTrajectoryState:
        """
        Get the target state at the given point in time along the trajectory

        :param time: The time to sample the trajectory at in seconds
        :return: The target state
        """
        ...

    def flip(self) -> PathPlannerTrajectory:
        """
        Flip this trajectory for the other side of the field, maintaining a blue alliance origin

        :return: This trajectory with all states flipped to the other side of the field
        """
        ...

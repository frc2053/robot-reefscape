"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import List, Union
from wpimath.geometry import Translation2d
from wpimath.kinematics import (
    ChassisSpeeds,
    DifferentialDriveKinematics,
    SwerveDrive4Kinematics,
    SwerveModuleState,
)
from wpimath.system.plant import DCMotor
from numpy.typing import NDArray

@dataclass
class PIDConstants:
    """
    PID constants used to create PID controllers

    Args:
        kP (float): P
        kI (float): I
        kD (float): D
        iZone (float): Integral range
    """

    kP: float = ...
    kI: float = ...
    kD: float = ...
    iZone: float = ...

class ModuleConfig:
    wheelRadiusMeters: float
    maxDriveVelocityMPS: float
    wheelCOF: float
    driveMotor: DCMotor
    driveCurrentLimit: float
    maxDriveVelocityRadPerSec: float
    torqueLoss: float
    def __init__(
        self,
        wheelRadiusMeters: float,
        maxDriveVelocityMPS: float,
        wheelCOF: float,
        driveMotor: DCMotor,
        driveCurrentLimit: float,
        numMotors: int,
    ) -> None:
        """
        Configuration of a robot drive module. This can either be a swerve module,
        or one side of a differential drive train.

        :param wheelRadiusMeters: Radius of the drive wheels, in meters.
        :param maxDriveVelocityMPS: The max speed that the drive motor can reach while actually driving the robot at full output, in M/S.
        :param wheelCOF: The coefficient of friction between the drive wheel and the carpet. If you are unsure, just use a placeholder value of 1.0.
        :param driveMotor: The DCMotor representing the drive motor gearbox, including gear reduction
        :param driveCurrentLimit: The current limit of the drive motor, in Amps
        :param numMotors: The number of motors per module. For swerve, this is 1. For differential, this is usually 2.
        """
        ...

class RobotConfig:
    massKG: float
    MOI: float
    moduleConfig: ModuleConfig
    moduleLocations: List[Translation2d]
    isHolonomic: bool
    numModules: int
    modulePivotDistance: List[float]
    wheelFrictionForce: float
    maxTorqueFriction: float
    _swerveKinematics: Union[SwerveDrive4Kinematics, None]
    _diffKinematics: Union[DifferentialDriveKinematics, None]
    _forceKinematics: NDArray
    def __init__(
        self,
        massKG: float,
        MOI: float,
        moduleConfig: ModuleConfig,
        moduleOffsets: List[Translation2d] = ...,
        trackwidthMeters: float = ...,
    ) -> None:
        """
        Create a robot config object. Either moduleOffsets(for swerve robots) or trackwidthMeters(for diff drive robots) must be given.

        :param massKG: The mass of the robot, including bumpers and battery, in KG
        :param MOI: The moment of inertia of the robot, in KG*M^2
        :param moduleConfig: The drive module config
        :param moduleOffsets: The locations of the module relative to the physical center of the robot. Only robots with 4 modules are supported, and they should be in FL, FR, BL, BR order. Only used for swerve robots.
        :param trackwidthMeters: The distance between the left and right side of the drivetrain, in meters. Only used for diff drive robots
        """
        ...

    def toSwerveModuleStates(self, speeds: ChassisSpeeds) -> List[SwerveModuleState]:
        """
        Convert robot-relative chassis speeds to a list of swerve module states. This will use
        differential kinematics for diff drive robots, then convert the wheel speeds to module states.

        :param speeds: Robot-relative chassis speeds
        :return: List of swerve module states
        """
        ...

    def toChassisSpeeds(self, states: List[SwerveModuleState]) -> ChassisSpeeds:
        """
        Convert a list of swerve module states to robot-relative chassis speeds. This will use
        differential kinematics for diff drive robots.

        :param states: List of swerve module states
        :return: Robot-relative chassis speeds
        """
        ...

    def chassisForcesToWheelForceVectors(
        self, chassisForces: ChassisSpeeds
    ) -> List[Translation2d]:
        """
        Convert chassis forces (passed as ChassisSpeeds) to individual wheel force vectors

        :param chassisForces: The linear X/Y force and torque acting on the whole robot
        :return: List of individual wheel force vectors
        """
        ...

    @staticmethod
    def fromGUISettings() -> RobotConfig:
        """
        Load the robot config from the shared settings file created by the GUI

        :return: RobotConfig matching the robot settings in the GUI
        """
        ...
